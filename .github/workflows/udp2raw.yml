name: udp2raw-build
on:
  workflow_dispatch:
    inputs:
      branch:
        description: '编译udp2raw源码的分支或版本号，默认主分支fake-http'
        required: true
        default: 'fake-http'
      del:
        description: '是否删除历史编译的流程记录'
        required: true
        default: false
        type: boolean
      rel:
        description: '编译完成后是否发布Release'
        required: true
        default: false
        type: boolean
      tag:
        description: '指定Release的版本号（留空为源码提交哈希值）'
        required: false
        default: ''
      upx:
        description: '是否使用upx压缩linux的二进制'
        required: true
        default: true
        type: boolean
  
env:
  branch: "${{ github.event.inputs.branch }}"
  tag: "${{ github.event.inputs.tag }}"
  rel: "${{ github.event.inputs.rel }}"
  TZ: Asia/Shanghai
permissions:
  contents: write
  actions: write
jobs:
  build:
    name: Build ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
        
        - target: apple-darwin
          os: macos-latest
          
        - target: x86_64-pc-windows
          os: ubuntu-latest
          URL: x86_64-w64-mingw32

        - target: i686-pc-windows
          os: ubuntu-latest
          URL: i686-w64-mingw32

        - target: aarch64-pc-windows
          os: ubuntu-latest
          URL: aarch64-w64-mingw32
          
        - target: aarch64-linux-musl
          os: ubuntu-latest
          URL: aarch64-linux-musl
          
        - target: x86_64-linux-musl
          os: ubuntu-latest
          URL: x86_64-linux-musl
            
        - target: i686-linux-musl
          os: ubuntu-latest
          URL: i686-linux-musl
        
        - target: armv7-linux-musleabihf
          os: ubuntu-latest
          URL: armv7l-linux-musleabihf

        - target: armv7-linux-musleabi
          os: ubuntu-latest
          URL: armv7m-linux-musleabi
          
        - target: arm-linux-musleabihf
          os: ubuntu-latest
          URL: arm-linux-musleabihf

        - target: arm-linux-musleabi
          os: ubuntu-latest
          URL: arm-linux-musleabi

        - target: mipsel-linux-musl
          os: ubuntu-latest
          URL: mipsel-linux-muslsf

        - target: mips-linux-musl
          os: ubuntu-latest
          URL: mips-linux-muslsf

        - target: mips64-linux-musl
          os: ubuntu-latest
          URL: mips-linux-musl

        - target: s390x-linux-musl
          os: ubuntu-latest
          URL: s390x-linux-musl

        - target: loongarch64-linux-musl
          os: ubuntu-latest
          URL: loongarch64-linux-musl

        - target: x86_64-freebsd
          os: ubuntu-latest
          arch: x86-64
          version: '14.2'

        - target: x86_64-openbsd
          os: ubuntu-latest
          arch: x86-64
          version: '7.6'

        - target: arm64-freebsd
          os: ubuntu-latest
          arch: arm64
          version: '14.2'

        - target: arm64-openbsd
          os: ubuntu-latest
          arch: arm64
          version: '7.6'

    runs-on: ${{ matrix.os }}
    steps:
     - name: Checkout code
       uses: actions/checkout@v4
       with:
        repository: MikeWang000000/udp2raw
        ref: ${{ env.branch }}
     - name: 下载linux-musl-gcc
       if: ${{ runner.os == 'Linux' && !endsWith(matrix.target, 'openbsd') && !endsWith(matrix.target, 'freebsd') }}
       uses: lmq8267/dl-musl@main
       with:
        target: ${{ matrix.URL }}
        static: true
        gccpath: /tmp
     - name: 编译 macOS
       if: ${{ runner.os == 'macOS' }}
       shell: bash
       env:
        TARGET: ${{ matrix.target }}
       run: |
         ARCH=$(uname -m)
         echo "当前机器架构: $ARCH"
         
         export CC="clang -arch x86_64"
         export CXX="clang++ -arch x86_64"
         mkdir -p build
         cd build
         cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXE_LINKER_FLAGS="-static"
         make -j$(sysctl -n hw.logicalcpu)
         file udp2raw
         otool -L udp2raw
         udp2raw -h
         mv -f udp2raw udp2raw-x86_64
         make clean

         export CC="clang -arch arm64"
         export CXX="clang++ -arch arm64"
         cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXE_LINKER_FLAGS="-static"
         make -j$(sysctl -n hw.logicalcpu)
         file udp2raw
         otool -L udp2raw
         udp2raw -h
         mv -f udp2raw udp2raw-arm64

         lipo -create -output udp2raw udp2raw-x86_64 udp2raw-arm64
         
         file udp2raw
         otool -L udp2raw
         udp2raw -h
         
     - name: 编译 Liunx Windows
       if: ${{ runner.os == 'Linux' && !endsWith(matrix.target, 'openbsd') && !endsWith(matrix.target, 'freebsd') }}
       run: |
         export CC="$CC -static"
         export CXX="$CXX -static"
         mkdir -p build && cd build
         cmake .. -DCMAKE_BUILD_TYPE=Release
         make -j$(nproc)
         if [[ "${{ matrix.target }}" == "x86_64-pc-windows" ]] ; then
            
            ls
         elif [[ "${{ matrix.target }}" == "i686-pc-windows" ]] ; then
            ls
         elif [[ "${{ matrix.target }}" == "aarch64-pc-windows" ]] ; then
            ls
         else
            $STRIP udp2raw
            file udp2raw
         fi
     - name: 编译 FreeBSD
       if: ${{ endsWith(matrix.target, 'freebsd') }}
       uses: cross-platform-actions/action@master
       with:
         operating_system: freebsd
         architecture: ${{ matrix.arch }}
         version: ${{ matrix.version }}
         shell: bash
         memory: 5G
         cpu_count: 4
         run: |
              sudo pkg install -y gmake cmake
              export CC="clang -static"
              export CXX="clang++ -static"
              mkdir -p build
              cd build
              cmake .. -DCMAKE_BUILD_TYPE=Release
              gmake -j$(sysctl -n hw.ncpu)
              strip udp2raw
              file udp2raw
              ldd udp2raw || true
              udp2raw -h
     - name: 编译 OpenBSD
       if: ${{ endsWith(matrix.target, 'openbsd') }}
       uses: cross-platform-actions/action@master
       with:
         operating_system: openbsd
         architecture: ${{ matrix.arch }}
         version: ${{ matrix.version }}
         shell: bash
         memory: 5G
         cpu_count: 4
         run: |
              sudo pkg_add gmake cmake
              export CC="clang -static"
              export CXX="clang++ -static"
              mkdir -p build
              cd build
              cmake .. -DCMAKE_BUILD_TYPE=Release
              gmake -j$(sysctl -n hw.ncpu)
              strip udp2raw
              file udp2raw
              ldd udp2raw || true
              udp2raw -h
     - name: 安装 UPX
       if: ${{ runner.os == 'Linux' && !endsWith(matrix.target, 'windows') && !endsWith(matrix.target, 'openbsd') && !endsWith(matrix.target, 'freebsd') && !startsWith(matrix.target, 's390x') && !startsWith(matrix.target, 'loongarch64') && github.event.inputs.upx == 'true' }}
       uses: crazy-max/ghaction-upx@v3
       with:
        version: v4.2.4
        install-only: true
     - name: 压缩
       if: ${{ runner.os == 'Linux' && !endsWith(matrix.target, 'windows') && !endsWith(matrix.target, 'openbsd') && !endsWith(matrix.target, 'freebsd') && !startsWith(matrix.target, 's390x') && !startsWith(matrix.target, 'loongarch64') && github.event.inputs.upx == 'true' }}
       run: upx --lzma --best build/udp2raw
     - uses: actions/upload-artifact@v4
       with:
        name: udp2raw-${{ env.branch }}-${{ matrix.target }}
        path: build/udp2raw
     - name: 日期
       if: github.event.inputs.rel == 'true'
       shell: bash
       run: |
          echo "build_time=$(date '+%Y年%m月%d日%H:%M:%S' | jq -sRr @uri)" >> $GITHUB_ENV
          if [ -z "$TAG" ]; then
              echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi
          echo "haxi=$(git rev-parse HEAD)" >> $GITHUB_ENV
          mv -f build/udp2raw build/udp2raw-${{ matrix.target }}
       env:
        TAG: ${{ env.tag }}
        TARGET: ${{ matrix.target }}
     - name: 发布Release
       if: github.event.inputs.rel == 'true'
       uses: softprops/action-gh-release@v2
       with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
           > ### ![](https://img.shields.io/badge/%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4-${{ env.build_time }}-8267?logo=github&labelColor=%E9%A1%BB)![](https://img.shields.io/github/downloads/${{ github.repository }}/${{env.tag}}/total?label=%E4%B8%8B%E8%BD%BD%E6%AC%A1%E6%95%B0&logo=github)
           
           [提交记录](https://github.com/MikeWang000000/udp2raw/tree/${{ env.haxi }})
           
           [官方源码](https://github.com/MikeWang000000/udp2raw)
           
          tag_name: ${{env.tag}}
          files: build/udp2raw-${{ matrix.target }}
  del:
    runs-on: ubuntu-latest
    steps:
      - name: 删除流程记录
        if: github.event.inputs.del == 'true'
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          retain_days: 0
          keep_minimum_runs: 0
